import { useState, useEffect, useCallback } from "react";
import "@sweetalert2/theme-minimal/minimal.scss";
import { getCommon, getCrrData } from "../../data";
import { Card, Col, Row, Container,Form } from "react-bootstrap";
import Button from "@mui/material/Button";
import Search from "@mui/icons-material/Search";
import Downloading from "@mui/icons-material/Downloading";
import Swal from "sweetalert2";
import NavMenu from "../fragments/NavMenu";
import { DataResponse } from "../../models/common/data-response.model";
import { useAppContext } from "../../providers/AppProvider";
import { CompanySelect } from "../../models/common/company-select.model";
import { PrefixSelect } from "../../models/common/prefix-select.model";
import "./Dashboard.tsx";
import { FaBars } from "react-icons/fa";
import { Chart } from "react-google-charts";
import { DatePicker, DatePickerProps } from "antd";
import { Moment } from "moment";
import { DataGrid, GridRowsProp, GridColDef } from "@mui/x-data-grid";
import CachedIcon from '@mui/icons-material/Cached';
import PauseCircleOutlineIcon from '@mui/icons-material/PauseCircleOutline';
import React from "react";

const styles = {
  datpicker: {
    width: "100%",
    height: "100%",
    verticalAlign: "middle",
  },
};

export default function LSSIT010() {
  const [common, setCommon] = useState<DataResponse>({
    COMPANIES: [],
    PREFIXES: [],
  });
  const [sType, setSType] = useState<string[]>(["0"]);
  const [company, setCompany] = useState<string[]>(["0"]);
  const [sQuarter, setSQuarter] = useState<string[]>(["1"]);
  const [sYear, setSYear] = useState<string[]>(["1"]);
  const [from, setFrom] = useState<Moment | null>(null);
  const [to, setTo] = useState<Moment | null>(null);

  const customDateFormat: DatePickerProps["format"] = (date: Moment) => {
    return `${date.toDate().toLocaleDateString("us-US", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
    })}`;
  };

  const handleFromChanged = useCallback((date: Moment | null) => {
    setFrom(date);
  }, []);

  const handleToChanged = useCallback((date: Moment | null) => {
    setTo(date);
  }, []);

  const rows: GridRowsProp = [
 
    {
      id: 1,
      col1: "12/05/2565",
      col2: "13:30:12",
      col3: "LSS-IP-010",
      col4: "ประมวลผลยกเลิกใบแจ้งหนี้อัตโนมัติ",
      col5: "PAYIN-6505-000001",
      col6: "รอดำเนินการ",
    },
    {
      id: 2,
      col1: "12/05/2565",
      col2: "13:40:12",
      col3: "LSS-IP-020",
      col4: "ประมวลผลเปรียบเทียบข้อมูล CRR กับ ข้อมูลนำส่งเงินสมทบ",
      col5: "9998",
      col6: "ไม่สำเร็จ",
    },
    {
      id: 3,
      col1: "12/05/2565",
      col2: "14:30:12",
      col3: "LSS-IP-030",
      col4: "ประมวลผลการส่ง e-mail",
      col5: "LSS:แจ้งให้ทราบ จากการตรวจสอบการนำส่งเงินสมทบของไตรมาส 2/2565 เปรียบเทียบกับรายงานหน้า ช2400 (CRR) พบว่า บริษัทนำส่งเงินสมทบครบถ้วน",
      col6: " สำเร็จ",
    },
  ];

  const columns: GridColDef[] = [
    { field: "col1", headerName: "วันที่ประมวลผล", width: 200 },
    { field: "col2", headerName: "เวลาที่ประมวลผล", width: 200 },
    { field: "col3", headerName: "เมนู", width: 200 },
    { field: "col4", headerName: "ชื่อเมนู", width: 350 },
    { field: "col5", headerName: "พารามีเตอร์", width: 300 },
    { field: "col6", headerName: "สถานะล่าสุด", width: 150 },
     {
      field: "col7",
      headerName: "ปุ่ม",
      minWidth: 200,
      renderCell: (params2: any) => {
        let _button = "";
        let _status = params2.row.col6;
        if (_status === "รอดำเนินการ") {
          return (
            <>
              <Button
                variant={"contained"}
                startIcon={<PauseCircleOutlineIcon />}
                onClick={oPenfile(params2.row.col4)}
                color={"warning"}
              >
                {_button}
              </Button>
            </>
          );
        } else if (_status === "ไม่สำเร็จ") {
          return (
            <>
              <Button
                variant={"contained"}
                startIcon={<CachedIcon />}
                onClick={oPenfile(params2.row.col4)}
                color={"error"}
              >
                {_button}
              </Button>
            </>
          );
        }
        
      },
    },
 
  ];


  const oPenfile = React.useCallback(
    (type: any) => (data: any) => {
      let msg = "กำลังดำเนินการ";
      Swal.fire(msg,type, "info");
    },
    []
  );

  useEffect(() => {
    handleOnLoad();
  }, []);

  const handleOnLoad = () => {
    return new Promise((resolve, reject) => {
      getCommon().then((data: DataResponse) => {
        setCommon({
          COMPANIES: [...data.COMPANIES] as CompanySelect[],
          PREFIXES: [...data.PREFIXES] as PrefixSelect[],
        });
      });
    });
  };
  function PostGraph() {
    // let getYear = new Date().getFullYear();
    // if (sType[0] === "0") {
    //   Swal.fire("ตรวจสอบ", "ตรวจสอบการเลือกประเภทอีกครั้ง", "warning");
    //   return;
    // }
    // if (company[0] === "0") {
    //   Swal.fire("ตรวจสอบ", "ตรวจสอบการเลือกบริษัทอีกครั้ง", "warning");
    //   return;
    // }
    // if (sYear[0] === "0") {
    //   Swal.fire("ตรวจสอบ", "ตรวจสอบการเลือกปีอีกครั้ง", "warning");
    //   return;
    // }
    // if (sQuarter[0] === "0") {
    //   Swal.fire("ตรวจสอบ", "ตรวจสอบการเลือกไตรมาสอีกครั้ง", "warning");
    //   return;
    // }
    //ถ้าข้อมูลถูกต้อง
    //PostData();
  }

  // ปรับให้ดึงจาก Store Procedure
  const data = [
    ["Task", "Hours per Day"],
    ["นำส่งแล้ว", 11],
    ["ยกเลิกไปแล้ว", 2],
    ["รอการนำส่ง", 2],
    ["รอยกไป ", 2],
    ["ยกไปแล้ว", 7],
  ];
  const options = {
    title: "สัดส่วนการนำส่งเงินสมทบขาด/เกิน",
  };

  return (
    <Container fluid>
      <Row>
        <Col>
          <NavMenu />
          <Card style={{ marginTop: "7rem", marginBottom: "2rem" }}>
            <Card.Header>LSS-IP-010 ประมวลผลยกเลิกใบแจ้งหนี้อัตโนมัติ</Card.Header>
            <Card.Body>
              <Row style={{ marginBottom: 10, marginTop: 20 }}>
                <Col sm={6} lg={1} style={{ textAlign: "right" }}>
                  ช่วงวันที่
                </Col>
                <Col sm={6} lg={2}>
                <DatePicker
                    allowClear={true}
                    format={customDateFormat}
                    className="form-control"
                    value={from ?? null}
                    onChange={handleFromChanged}
                    style={styles.datpicker}
                  />
                </Col>
                <Col sm={6} lg={1} style={{ textAlign: "right" }}>
                  ถึงวันที่
                </Col>
                <Col sm={6} lg={2}>
                <DatePicker
                    allowClear={true}
                    format={customDateFormat}
                    className="form-control"
                    value={to ?? null}
                    onChange={handleToChanged}
                    style={styles.datpicker}
                  />
                </Col>
                <Col sm={6} lg={1} style={{ textAlign: "right" }}>
                  
                </Col>
                <Col sm={6} lg={1}>
                   
                </Col>
                <Col sm={6} lg={1} style={{ textAlign: "right" }}>
                  
                </Col>
                <Col sm={6} lg={1}>
                  
                </Col>
                <Col
                  lg={1}
                  style={{
                    display: "flex",
                    justifyContent: "flex-end",
                    textAlign: "right",
                  }}
                >
                  <Button
                    style={{ marginRight: 5 }}
                    variant="contained"
                    startIcon={<Search />}
                    onClick={() => PostGraph()}
                  >
                    {" "}
                    ค้นหา
                  </Button>
                </Col>
                <Col
                  md={1}
                  style={{
                    display: "flex",
                    justifyContent: "flex-end",
                    textAlign: "right",
                  }}
                >
                  {/* <Button
                    style={{ marginRight: 5 }}
                    variant="contained"
                    startIcon={<Downloading />}
                  >
                    {" "}
                    Excel
                  </Button> */}
                </Col>
              </Row>
            </Card.Body>
          </Card>
 
          <Row>
            <Col>
              <div style={{ height: 500, width: "100%" }}>
                <div style={{ display: "flex", height: "100%" }}>
                  <div style={{ flexGrow: 1 }}>
                  <DataGrid
                    sx={{ fontFamily: "kanit", fontSize: 18, boxShadow: 2 }}
                    rows={rows}
                    columns={columns}
                  />
                  </div>
                </div>
              </div>
            </Col>
          </Row>

          <div style={{ display: "flex", height: "100%" }}>
            <div style={{ flexGrow: 1 }}></div>
          </div>
        </Col>
      </Row>
    </Container>
  );
}
